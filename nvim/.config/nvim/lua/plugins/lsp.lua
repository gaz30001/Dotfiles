return {
	"neovim/nvim-lspconfig",
	config = function()
		local lspconfig = require("lspconfig")

		local on_attach = function(client, bufnr)
			if client.server_capabilities.documentFormattingProvider then
				vim.api.nvim_create_autocmd("BufWritePre", {
					buffer = bufnr,
					callback = function()
						vim.lsp.buf.format({ async = false })
					end,
				})
			end
		end

		-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Lua (–¥–ª—è Neovim)
		lspconfig.lua_ls.setup({
			on_attach = on_attach,
			settings = {
				Lua = {
					diagnostics = { globals = { "vim" } },
					workspace = { checkThirdParty = false },
				},
			},
		})

		-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Bash
		lspconfig.bashls.setup({
			on_attach = on_attach,
		})

		-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
		lspconfig.pyright.setup({
			on_attach = on_attach,
		})

		-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ C/C++
		lspconfig.clangd.setup({
			on_attach = on_attach,
		})

		-- üìå –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫
		vim.diagnostic.config({
			virtual_text = false, -- –æ—Ç–∫–ª—é—á–∞–µ–º inline-–æ—à–∏–±–∫–∏
			signs = true, -- –≤–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å–ª–µ–≤–∞
			underline = true,
			update_in_insert = false,
			severity_sort = true,
		})

		-- –ò–∫–æ–Ω–∫–∏ –¥–ª—è –æ—à–∏–±–æ–∫ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
		local signs = {
			Error = "ÔÅó ",
			Warn = "ÔÅ± ",
			Hint = "ÔÉ´ ",
			Info = "ÔÅö ",
		}

		for type, icon in pairs(signs) do
			local hl = "DiagnosticSign" .. type
			vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
		end
	end,
}
